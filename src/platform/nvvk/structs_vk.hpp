/* based on VK_HEADER_VERSION 126 */
/* auto generated by structs_vk.lua */

/* Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//////////////////////////////////////////////////////////////////////////
/**
  # function nvvk::make, nvvk::clear
  Contains templated `nvvk::make<T>` and `nvvk::clear<T>` functions that are 
  auto-generated by `structs.lua`. The functions provide default 
  structs for the Vulkan C api by initializing the `VkStructureType sType`
  field (also for nested structs) and clearing the rest to zero.

  ``` c++
  auto compCreateInfo = nvvk::make<VkComputePipelineCreateInfo>;
  ```
*/
 
#pragma once
namespace nvvk {
  template <class T> T make(){ return T(); }
  template <class T> void clear(T& ref){ ref = make<T>(); }
  template<> inline VkApplicationInfo make<VkApplicationInfo>(){
    return VkApplicationInfo{VK_STRUCTURE_TYPE_APPLICATION_INFO};
  }
  template<> inline VkInstanceCreateInfo make<VkInstanceCreateInfo>(){
    return VkInstanceCreateInfo{VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO};
  }
  template<> inline VkDeviceQueueCreateInfo make<VkDeviceQueueCreateInfo>(){
    return VkDeviceQueueCreateInfo{VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO};
  }
  template<> inline VkDeviceCreateInfo make<VkDeviceCreateInfo>(){
    return VkDeviceCreateInfo{VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO};
  }
  template<> inline VkSubmitInfo make<VkSubmitInfo>(){
    return VkSubmitInfo{VK_STRUCTURE_TYPE_SUBMIT_INFO};
  }
  template<> inline VkMemoryAllocateInfo make<VkMemoryAllocateInfo>(){
    return VkMemoryAllocateInfo{VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO};
  }
  template<> inline VkMappedMemoryRange make<VkMappedMemoryRange>(){
    return VkMappedMemoryRange{VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE};
  }
  template<> inline VkBindSparseInfo make<VkBindSparseInfo>(){
    return VkBindSparseInfo{VK_STRUCTURE_TYPE_BIND_SPARSE_INFO};
  }
  template<> inline VkFenceCreateInfo make<VkFenceCreateInfo>(){
    return VkFenceCreateInfo{VK_STRUCTURE_TYPE_FENCE_CREATE_INFO};
  }
  template<> inline VkSemaphoreCreateInfo make<VkSemaphoreCreateInfo>(){
    return VkSemaphoreCreateInfo{VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO};
  }
  template<> inline VkEventCreateInfo make<VkEventCreateInfo>(){
    return VkEventCreateInfo{VK_STRUCTURE_TYPE_EVENT_CREATE_INFO};
  }
  template<> inline VkQueryPoolCreateInfo make<VkQueryPoolCreateInfo>(){
    return VkQueryPoolCreateInfo{VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO};
  }
  template<> inline VkBufferCreateInfo make<VkBufferCreateInfo>(){
    return VkBufferCreateInfo{VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO};
  }
  template<> inline VkBufferViewCreateInfo make<VkBufferViewCreateInfo>(){
    return VkBufferViewCreateInfo{VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO};
  }
  template<> inline VkImageCreateInfo make<VkImageCreateInfo>(){
    return VkImageCreateInfo{VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO};
  }
  template<> inline VkImageViewCreateInfo make<VkImageViewCreateInfo>(){
    return VkImageViewCreateInfo{VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO};
  }
  template<> inline VkShaderModuleCreateInfo make<VkShaderModuleCreateInfo>(){
    return VkShaderModuleCreateInfo{VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO};
  }
  template<> inline VkPipelineCacheCreateInfo make<VkPipelineCacheCreateInfo>(){
    return VkPipelineCacheCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO};
  }
  template<> inline VkPipelineShaderStageCreateInfo make<VkPipelineShaderStageCreateInfo>(){
    return VkPipelineShaderStageCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO};
  }
  template<> inline VkPipelineVertexInputStateCreateInfo make<VkPipelineVertexInputStateCreateInfo>(){
    return VkPipelineVertexInputStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineInputAssemblyStateCreateInfo make<VkPipelineInputAssemblyStateCreateInfo>(){
    return VkPipelineInputAssemblyStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineTessellationStateCreateInfo make<VkPipelineTessellationStateCreateInfo>(){
    return VkPipelineTessellationStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineViewportStateCreateInfo make<VkPipelineViewportStateCreateInfo>(){
    return VkPipelineViewportStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineRasterizationStateCreateInfo make<VkPipelineRasterizationStateCreateInfo>(){
    return VkPipelineRasterizationStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineMultisampleStateCreateInfo make<VkPipelineMultisampleStateCreateInfo>(){
    return VkPipelineMultisampleStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineDepthStencilStateCreateInfo make<VkPipelineDepthStencilStateCreateInfo>(){
    return VkPipelineDepthStencilStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineColorBlendStateCreateInfo make<VkPipelineColorBlendStateCreateInfo>(){
    return VkPipelineColorBlendStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO};
  }
  template<> inline VkPipelineDynamicStateCreateInfo make<VkPipelineDynamicStateCreateInfo>(){
    return VkPipelineDynamicStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO};
  }
  template<> inline VkGraphicsPipelineCreateInfo make<VkGraphicsPipelineCreateInfo>(){
    return VkGraphicsPipelineCreateInfo{VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO};
  }
  template<> inline VkComputePipelineCreateInfo make<VkComputePipelineCreateInfo>(){
    VkComputePipelineCreateInfo ret = {VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO};
    ret.stage = {VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO};
    return ret;
  }
  template<> inline VkPipelineLayoutCreateInfo make<VkPipelineLayoutCreateInfo>(){
    return VkPipelineLayoutCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO};
  }
  template<> inline VkSamplerCreateInfo make<VkSamplerCreateInfo>(){
    return VkSamplerCreateInfo{VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO};
  }
  template<> inline VkDescriptorSetLayoutCreateInfo make<VkDescriptorSetLayoutCreateInfo>(){
    return VkDescriptorSetLayoutCreateInfo{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO};
  }
  template<> inline VkDescriptorPoolCreateInfo make<VkDescriptorPoolCreateInfo>(){
    return VkDescriptorPoolCreateInfo{VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO};
  }
  template<> inline VkDescriptorSetAllocateInfo make<VkDescriptorSetAllocateInfo>(){
    return VkDescriptorSetAllocateInfo{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO};
  }
  template<> inline VkWriteDescriptorSet make<VkWriteDescriptorSet>(){
    return VkWriteDescriptorSet{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET};
  }
  template<> inline VkCopyDescriptorSet make<VkCopyDescriptorSet>(){
    return VkCopyDescriptorSet{VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET};
  }
  template<> inline VkFramebufferCreateInfo make<VkFramebufferCreateInfo>(){
    return VkFramebufferCreateInfo{VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO};
  }
  template<> inline VkRenderPassCreateInfo make<VkRenderPassCreateInfo>(){
    return VkRenderPassCreateInfo{VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO};
  }
  template<> inline VkCommandPoolCreateInfo make<VkCommandPoolCreateInfo>(){
    return VkCommandPoolCreateInfo{VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO};
  }
  template<> inline VkCommandBufferAllocateInfo make<VkCommandBufferAllocateInfo>(){
    return VkCommandBufferAllocateInfo{VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO};
  }
  template<> inline VkCommandBufferInheritanceInfo make<VkCommandBufferInheritanceInfo>(){
    return VkCommandBufferInheritanceInfo{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO};
  }
  template<> inline VkCommandBufferBeginInfo make<VkCommandBufferBeginInfo>(){
    return VkCommandBufferBeginInfo{VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO};
  }
  template<> inline VkMemoryBarrier make<VkMemoryBarrier>(){
    return VkMemoryBarrier{VK_STRUCTURE_TYPE_MEMORY_BARRIER};
  }
  template<> inline VkBufferMemoryBarrier make<VkBufferMemoryBarrier>(){
    return VkBufferMemoryBarrier{VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER};
  }
  template<> inline VkImageMemoryBarrier make<VkImageMemoryBarrier>(){
    return VkImageMemoryBarrier{VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER};
  }
  template<> inline VkRenderPassBeginInfo make<VkRenderPassBeginInfo>(){
    return VkRenderPassBeginInfo{VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO};
  }
  template<> inline VkPhysicalDeviceSubgroupProperties make<VkPhysicalDeviceSubgroupProperties>(){
    return VkPhysicalDeviceSubgroupProperties{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES};
  }
  template<> inline VkBindBufferMemoryInfo make<VkBindBufferMemoryInfo>(){
    return VkBindBufferMemoryInfo{VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO};
  }
  template<> inline VkBindImageMemoryInfo make<VkBindImageMemoryInfo>(){
    return VkBindImageMemoryInfo{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO};
  }
  template<> inline VkPhysicalDevice16BitStorageFeatures make<VkPhysicalDevice16BitStorageFeatures>(){
    return VkPhysicalDevice16BitStorageFeatures{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES};
  }
  template<> inline VkMemoryDedicatedRequirements make<VkMemoryDedicatedRequirements>(){
    return VkMemoryDedicatedRequirements{VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS};
  }
  template<> inline VkMemoryDedicatedAllocateInfo make<VkMemoryDedicatedAllocateInfo>(){
    return VkMemoryDedicatedAllocateInfo{VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO};
  }
  template<> inline VkMemoryAllocateFlagsInfo make<VkMemoryAllocateFlagsInfo>(){
    return VkMemoryAllocateFlagsInfo{VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO};
  }
  template<> inline VkDeviceGroupRenderPassBeginInfo make<VkDeviceGroupRenderPassBeginInfo>(){
    return VkDeviceGroupRenderPassBeginInfo{VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO};
  }
  template<> inline VkDeviceGroupCommandBufferBeginInfo make<VkDeviceGroupCommandBufferBeginInfo>(){
    return VkDeviceGroupCommandBufferBeginInfo{VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO};
  }
  template<> inline VkDeviceGroupSubmitInfo make<VkDeviceGroupSubmitInfo>(){
    return VkDeviceGroupSubmitInfo{VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO};
  }
  template<> inline VkDeviceGroupBindSparseInfo make<VkDeviceGroupBindSparseInfo>(){
    return VkDeviceGroupBindSparseInfo{VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO};
  }
  template<> inline VkBindBufferMemoryDeviceGroupInfo make<VkBindBufferMemoryDeviceGroupInfo>(){
    return VkBindBufferMemoryDeviceGroupInfo{VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO};
  }
  template<> inline VkBindImageMemoryDeviceGroupInfo make<VkBindImageMemoryDeviceGroupInfo>(){
    return VkBindImageMemoryDeviceGroupInfo{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO};
  }
  template<> inline VkPhysicalDeviceGroupProperties make<VkPhysicalDeviceGroupProperties>(){
    return VkPhysicalDeviceGroupProperties{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES};
  }
  template<> inline VkDeviceGroupDeviceCreateInfo make<VkDeviceGroupDeviceCreateInfo>(){
    return VkDeviceGroupDeviceCreateInfo{VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO};
  }
  template<> inline VkBufferMemoryRequirementsInfo2 make<VkBufferMemoryRequirementsInfo2>(){
    return VkBufferMemoryRequirementsInfo2{VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2};
  }
  template<> inline VkImageMemoryRequirementsInfo2 make<VkImageMemoryRequirementsInfo2>(){
    return VkImageMemoryRequirementsInfo2{VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2};
  }
  template<> inline VkImageSparseMemoryRequirementsInfo2 make<VkImageSparseMemoryRequirementsInfo2>(){
    return VkImageSparseMemoryRequirementsInfo2{VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2};
  }
  template<> inline VkMemoryRequirements2 make<VkMemoryRequirements2>(){
    return VkMemoryRequirements2{VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2};
  }
  template<> inline VkSparseImageMemoryRequirements2 make<VkSparseImageMemoryRequirements2>(){
    return VkSparseImageMemoryRequirements2{VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2};
  }
  template<> inline VkPhysicalDeviceFeatures2 make<VkPhysicalDeviceFeatures2>(){
    return VkPhysicalDeviceFeatures2{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2};
  }
  template<> inline VkPhysicalDeviceProperties2 make<VkPhysicalDeviceProperties2>(){
    return VkPhysicalDeviceProperties2{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2};
  }
  template<> inline VkFormatProperties2 make<VkFormatProperties2>(){
    return VkFormatProperties2{VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2};
  }
  template<> inline VkImageFormatProperties2 make<VkImageFormatProperties2>(){
    return VkImageFormatProperties2{VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2};
  }
  template<> inline VkPhysicalDeviceImageFormatInfo2 make<VkPhysicalDeviceImageFormatInfo2>(){
    return VkPhysicalDeviceImageFormatInfo2{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2};
  }
  template<> inline VkQueueFamilyProperties2 make<VkQueueFamilyProperties2>(){
    return VkQueueFamilyProperties2{VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2};
  }
  template<> inline VkPhysicalDeviceMemoryProperties2 make<VkPhysicalDeviceMemoryProperties2>(){
    return VkPhysicalDeviceMemoryProperties2{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2};
  }
  template<> inline VkSparseImageFormatProperties2 make<VkSparseImageFormatProperties2>(){
    return VkSparseImageFormatProperties2{VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2};
  }
  template<> inline VkPhysicalDeviceSparseImageFormatInfo2 make<VkPhysicalDeviceSparseImageFormatInfo2>(){
    return VkPhysicalDeviceSparseImageFormatInfo2{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2};
  }
  template<> inline VkPhysicalDevicePointClippingProperties make<VkPhysicalDevicePointClippingProperties>(){
    return VkPhysicalDevicePointClippingProperties{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES};
  }
  template<> inline VkRenderPassInputAttachmentAspectCreateInfo make<VkRenderPassInputAttachmentAspectCreateInfo>(){
    return VkRenderPassInputAttachmentAspectCreateInfo{VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO};
  }
  template<> inline VkImageViewUsageCreateInfo make<VkImageViewUsageCreateInfo>(){
    return VkImageViewUsageCreateInfo{VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO};
  }
  template<> inline VkPipelineTessellationDomainOriginStateCreateInfo make<VkPipelineTessellationDomainOriginStateCreateInfo>(){
    return VkPipelineTessellationDomainOriginStateCreateInfo{VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO};
  }
  template<> inline VkRenderPassMultiviewCreateInfo make<VkRenderPassMultiviewCreateInfo>(){
    return VkRenderPassMultiviewCreateInfo{VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO};
  }
  template<> inline VkPhysicalDeviceMultiviewFeatures make<VkPhysicalDeviceMultiviewFeatures>(){
    return VkPhysicalDeviceMultiviewFeatures{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES};
  }
  template<> inline VkPhysicalDeviceMultiviewProperties make<VkPhysicalDeviceMultiviewProperties>(){
    return VkPhysicalDeviceMultiviewProperties{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES};
  }
  template<> inline VkPhysicalDeviceVariablePointersFeatures make<VkPhysicalDeviceVariablePointersFeatures>(){
    return VkPhysicalDeviceVariablePointersFeatures{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES};
  }
  template<> inline VkPhysicalDeviceProtectedMemoryFeatures make<VkPhysicalDeviceProtectedMemoryFeatures>(){
    return VkPhysicalDeviceProtectedMemoryFeatures{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES};
  }
  template<> inline VkPhysicalDeviceProtectedMemoryProperties make<VkPhysicalDeviceProtectedMemoryProperties>(){
    return VkPhysicalDeviceProtectedMemoryProperties{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES};
  }
  template<> inline VkDeviceQueueInfo2 make<VkDeviceQueueInfo2>(){
    return VkDeviceQueueInfo2{VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2};
  }
  template<> inline VkProtectedSubmitInfo make<VkProtectedSubmitInfo>(){
    return VkProtectedSubmitInfo{VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO};
  }
  template<> inline VkSamplerYcbcrConversionCreateInfo make<VkSamplerYcbcrConversionCreateInfo>(){
    return VkSamplerYcbcrConversionCreateInfo{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO};
  }
  template<> inline VkSamplerYcbcrConversionInfo make<VkSamplerYcbcrConversionInfo>(){
    return VkSamplerYcbcrConversionInfo{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO};
  }
  template<> inline VkBindImagePlaneMemoryInfo make<VkBindImagePlaneMemoryInfo>(){
    return VkBindImagePlaneMemoryInfo{VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO};
  }
  template<> inline VkImagePlaneMemoryRequirementsInfo make<VkImagePlaneMemoryRequirementsInfo>(){
    return VkImagePlaneMemoryRequirementsInfo{VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO};
  }
  template<> inline VkPhysicalDeviceSamplerYcbcrConversionFeatures make<VkPhysicalDeviceSamplerYcbcrConversionFeatures>(){
    return VkPhysicalDeviceSamplerYcbcrConversionFeatures{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES};
  }
  template<> inline VkSamplerYcbcrConversionImageFormatProperties make<VkSamplerYcbcrConversionImageFormatProperties>(){
    return VkSamplerYcbcrConversionImageFormatProperties{VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES};
  }
  template<> inline VkDescriptorUpdateTemplateCreateInfo make<VkDescriptorUpdateTemplateCreateInfo>(){
    return VkDescriptorUpdateTemplateCreateInfo{VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO};
  }
  template<> inline VkPhysicalDeviceExternalImageFormatInfo make<VkPhysicalDeviceExternalImageFormatInfo>(){
    return VkPhysicalDeviceExternalImageFormatInfo{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO};
  }
  template<> inline VkExternalImageFormatProperties make<VkExternalImageFormatProperties>(){
    return VkExternalImageFormatProperties{VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES};
  }
  template<> inline VkPhysicalDeviceExternalBufferInfo make<VkPhysicalDeviceExternalBufferInfo>(){
    return VkPhysicalDeviceExternalBufferInfo{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO};
  }
  template<> inline VkExternalBufferProperties make<VkExternalBufferProperties>(){
    return VkExternalBufferProperties{VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES};
  }
  template<> inline VkPhysicalDeviceIDProperties make<VkPhysicalDeviceIDProperties>(){
    return VkPhysicalDeviceIDProperties{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES};
  }
  template<> inline VkExternalMemoryImageCreateInfo make<VkExternalMemoryImageCreateInfo>(){
    return VkExternalMemoryImageCreateInfo{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO};
  }
  template<> inline VkExternalMemoryBufferCreateInfo make<VkExternalMemoryBufferCreateInfo>(){
    return VkExternalMemoryBufferCreateInfo{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO};
  }
  template<> inline VkExportMemoryAllocateInfo make<VkExportMemoryAllocateInfo>(){
    return VkExportMemoryAllocateInfo{VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO};
  }
  template<> inline VkPhysicalDeviceExternalFenceInfo make<VkPhysicalDeviceExternalFenceInfo>(){
    return VkPhysicalDeviceExternalFenceInfo{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO};
  }
  template<> inline VkExternalFenceProperties make<VkExternalFenceProperties>(){
    return VkExternalFenceProperties{VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES};
  }
  template<> inline VkExportFenceCreateInfo make<VkExportFenceCreateInfo>(){
    return VkExportFenceCreateInfo{VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO};
  }
  template<> inline VkExportSemaphoreCreateInfo make<VkExportSemaphoreCreateInfo>(){
    return VkExportSemaphoreCreateInfo{VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO};
  }
  template<> inline VkPhysicalDeviceExternalSemaphoreInfo make<VkPhysicalDeviceExternalSemaphoreInfo>(){
    return VkPhysicalDeviceExternalSemaphoreInfo{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO};
  }
  template<> inline VkExternalSemaphoreProperties make<VkExternalSemaphoreProperties>(){
    return VkExternalSemaphoreProperties{VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES};
  }
  template<> inline VkPhysicalDeviceMaintenance3Properties make<VkPhysicalDeviceMaintenance3Properties>(){
    return VkPhysicalDeviceMaintenance3Properties{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES};
  }
  template<> inline VkDescriptorSetLayoutSupport make<VkDescriptorSetLayoutSupport>(){
    return VkDescriptorSetLayoutSupport{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT};
  }
  template<> inline VkPhysicalDeviceShaderDrawParametersFeatures make<VkPhysicalDeviceShaderDrawParametersFeatures>(){
    return VkPhysicalDeviceShaderDrawParametersFeatures{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES};
  }
#if VK_KHR_swapchain
  template<> inline VkSwapchainCreateInfoKHR make<VkSwapchainCreateInfoKHR>(){
    return VkSwapchainCreateInfoKHR{VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR};
  }
  template<> inline VkPresentInfoKHR make<VkPresentInfoKHR>(){
    return VkPresentInfoKHR{VK_STRUCTURE_TYPE_PRESENT_INFO_KHR};
  }
  template<> inline VkImageSwapchainCreateInfoKHR make<VkImageSwapchainCreateInfoKHR>(){
    return VkImageSwapchainCreateInfoKHR{VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR};
  }
  template<> inline VkBindImageMemorySwapchainInfoKHR make<VkBindImageMemorySwapchainInfoKHR>(){
    return VkBindImageMemorySwapchainInfoKHR{VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR};
  }
  template<> inline VkAcquireNextImageInfoKHR make<VkAcquireNextImageInfoKHR>(){
    return VkAcquireNextImageInfoKHR{VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR};
  }
  template<> inline VkDeviceGroupPresentCapabilitiesKHR make<VkDeviceGroupPresentCapabilitiesKHR>(){
    return VkDeviceGroupPresentCapabilitiesKHR{VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR};
  }
  template<> inline VkDeviceGroupPresentInfoKHR make<VkDeviceGroupPresentInfoKHR>(){
    return VkDeviceGroupPresentInfoKHR{VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR};
  }
  template<> inline VkDeviceGroupSwapchainCreateInfoKHR make<VkDeviceGroupSwapchainCreateInfoKHR>(){
    return VkDeviceGroupSwapchainCreateInfoKHR{VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR};
  }
#endif
#if VK_KHR_display
  template<> inline VkDisplayModeCreateInfoKHR make<VkDisplayModeCreateInfoKHR>(){
    return VkDisplayModeCreateInfoKHR{VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR};
  }
  template<> inline VkDisplaySurfaceCreateInfoKHR make<VkDisplaySurfaceCreateInfoKHR>(){
    return VkDisplaySurfaceCreateInfoKHR{VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR};
  }
#endif
#if VK_KHR_display_swapchain
  template<> inline VkDisplayPresentInfoKHR make<VkDisplayPresentInfoKHR>(){
    return VkDisplayPresentInfoKHR{VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR};
  }
#endif
#if VK_KHR_external_memory_fd
  template<> inline VkImportMemoryFdInfoKHR make<VkImportMemoryFdInfoKHR>(){
    return VkImportMemoryFdInfoKHR{VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR};
  }
  template<> inline VkMemoryFdPropertiesKHR make<VkMemoryFdPropertiesKHR>(){
    return VkMemoryFdPropertiesKHR{VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR};
  }
  template<> inline VkMemoryGetFdInfoKHR make<VkMemoryGetFdInfoKHR>(){
    return VkMemoryGetFdInfoKHR{VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR};
  }
#endif
#if VK_KHR_external_semaphore_fd
  template<> inline VkImportSemaphoreFdInfoKHR make<VkImportSemaphoreFdInfoKHR>(){
    return VkImportSemaphoreFdInfoKHR{VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR};
  }
  template<> inline VkSemaphoreGetFdInfoKHR make<VkSemaphoreGetFdInfoKHR>(){
    return VkSemaphoreGetFdInfoKHR{VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR};
  }
#endif
#if VK_KHR_push_descriptor
  template<> inline VkPhysicalDevicePushDescriptorPropertiesKHR make<VkPhysicalDevicePushDescriptorPropertiesKHR>(){
    return VkPhysicalDevicePushDescriptorPropertiesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR};
  }
#endif
#if VK_KHR_shader_float16_int8
  template<> inline VkPhysicalDeviceShaderFloat16Int8FeaturesKHR make<VkPhysicalDeviceShaderFloat16Int8FeaturesKHR>(){
    return VkPhysicalDeviceShaderFloat16Int8FeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR};
  }
#endif
#if VK_KHR_incremental_present
  template<> inline VkPresentRegionsKHR make<VkPresentRegionsKHR>(){
    return VkPresentRegionsKHR{VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR};
  }
#endif
#if VK_KHR_imageless_framebuffer
  template<> inline VkPhysicalDeviceImagelessFramebufferFeaturesKHR make<VkPhysicalDeviceImagelessFramebufferFeaturesKHR>(){
    return VkPhysicalDeviceImagelessFramebufferFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR};
  }
  template<> inline VkFramebufferAttachmentImageInfoKHR make<VkFramebufferAttachmentImageInfoKHR>(){
    return VkFramebufferAttachmentImageInfoKHR{VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR};
  }
  template<> inline VkFramebufferAttachmentsCreateInfoKHR make<VkFramebufferAttachmentsCreateInfoKHR>(){
    return VkFramebufferAttachmentsCreateInfoKHR{VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR};
  }
  template<> inline VkRenderPassAttachmentBeginInfoKHR make<VkRenderPassAttachmentBeginInfoKHR>(){
    return VkRenderPassAttachmentBeginInfoKHR{VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR};
  }
#endif
#if VK_KHR_create_renderpass2
  template<> inline VkAttachmentDescription2KHR make<VkAttachmentDescription2KHR>(){
    return VkAttachmentDescription2KHR{VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR};
  }
  template<> inline VkAttachmentReference2KHR make<VkAttachmentReference2KHR>(){
    return VkAttachmentReference2KHR{VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR};
  }
  template<> inline VkSubpassDescription2KHR make<VkSubpassDescription2KHR>(){
    return VkSubpassDescription2KHR{VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR};
  }
  template<> inline VkSubpassDependency2KHR make<VkSubpassDependency2KHR>(){
    return VkSubpassDependency2KHR{VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR};
  }
  template<> inline VkRenderPassCreateInfo2KHR make<VkRenderPassCreateInfo2KHR>(){
    return VkRenderPassCreateInfo2KHR{VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR};
  }
  template<> inline VkSubpassBeginInfoKHR make<VkSubpassBeginInfoKHR>(){
    return VkSubpassBeginInfoKHR{VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR};
  }
  template<> inline VkSubpassEndInfoKHR make<VkSubpassEndInfoKHR>(){
    return VkSubpassEndInfoKHR{VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR};
  }
#endif
#if VK_KHR_shared_presentable_image
  template<> inline VkSharedPresentSurfaceCapabilitiesKHR make<VkSharedPresentSurfaceCapabilitiesKHR>(){
    return VkSharedPresentSurfaceCapabilitiesKHR{VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR};
  }
#endif
#if VK_KHR_external_fence_fd
  template<> inline VkImportFenceFdInfoKHR make<VkImportFenceFdInfoKHR>(){
    return VkImportFenceFdInfoKHR{VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR};
  }
  template<> inline VkFenceGetFdInfoKHR make<VkFenceGetFdInfoKHR>(){
    return VkFenceGetFdInfoKHR{VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR};
  }
#endif
#if VK_KHR_get_surface_capabilities2
  template<> inline VkPhysicalDeviceSurfaceInfo2KHR make<VkPhysicalDeviceSurfaceInfo2KHR>(){
    return VkPhysicalDeviceSurfaceInfo2KHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR};
  }
  template<> inline VkSurfaceCapabilities2KHR make<VkSurfaceCapabilities2KHR>(){
    return VkSurfaceCapabilities2KHR{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR};
  }
  template<> inline VkSurfaceFormat2KHR make<VkSurfaceFormat2KHR>(){
    return VkSurfaceFormat2KHR{VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR};
  }
#endif
#if VK_KHR_get_display_properties2
  template<> inline VkDisplayProperties2KHR make<VkDisplayProperties2KHR>(){
    return VkDisplayProperties2KHR{VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR};
  }
  template<> inline VkDisplayPlaneProperties2KHR make<VkDisplayPlaneProperties2KHR>(){
    return VkDisplayPlaneProperties2KHR{VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR};
  }
  template<> inline VkDisplayModeProperties2KHR make<VkDisplayModeProperties2KHR>(){
    return VkDisplayModeProperties2KHR{VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR};
  }
  template<> inline VkDisplayPlaneInfo2KHR make<VkDisplayPlaneInfo2KHR>(){
    return VkDisplayPlaneInfo2KHR{VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR};
  }
  template<> inline VkDisplayPlaneCapabilities2KHR make<VkDisplayPlaneCapabilities2KHR>(){
    return VkDisplayPlaneCapabilities2KHR{VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR};
  }
#endif
#if VK_KHR_image_format_list
  template<> inline VkImageFormatListCreateInfoKHR make<VkImageFormatListCreateInfoKHR>(){
    return VkImageFormatListCreateInfoKHR{VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR};
  }
#endif
#if VK_KHR_shader_subgroup_extended_types
  template<> inline VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR make<VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR>(){
    return VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR};
  }
#endif
#if VK_KHR_8bit_storage
  template<> inline VkPhysicalDevice8BitStorageFeaturesKHR make<VkPhysicalDevice8BitStorageFeaturesKHR>(){
    return VkPhysicalDevice8BitStorageFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR};
  }
#endif
#if VK_KHR_shader_atomic_int64
  template<> inline VkPhysicalDeviceShaderAtomicInt64FeaturesKHR make<VkPhysicalDeviceShaderAtomicInt64FeaturesKHR>(){
    return VkPhysicalDeviceShaderAtomicInt64FeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR};
  }
#endif
#if VK_KHR_shader_clock
  template<> inline VkPhysicalDeviceShaderClockFeaturesKHR make<VkPhysicalDeviceShaderClockFeaturesKHR>(){
    return VkPhysicalDeviceShaderClockFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR};
  }
#endif
#if VK_KHR_driver_properties
  template<> inline VkPhysicalDeviceDriverPropertiesKHR make<VkPhysicalDeviceDriverPropertiesKHR>(){
    return VkPhysicalDeviceDriverPropertiesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR};
  }
#endif
#if VK_KHR_shader_float_controls
  template<> inline VkPhysicalDeviceFloatControlsPropertiesKHR make<VkPhysicalDeviceFloatControlsPropertiesKHR>(){
    return VkPhysicalDeviceFloatControlsPropertiesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR};
  }
#endif
#if VK_KHR_depth_stencil_resolve
  template<> inline VkSubpassDescriptionDepthStencilResolveKHR make<VkSubpassDescriptionDepthStencilResolveKHR>(){
    return VkSubpassDescriptionDepthStencilResolveKHR{VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR};
  }
  template<> inline VkPhysicalDeviceDepthStencilResolvePropertiesKHR make<VkPhysicalDeviceDepthStencilResolvePropertiesKHR>(){
    return VkPhysicalDeviceDepthStencilResolvePropertiesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR};
  }
#endif
#if VK_KHR_timeline_semaphore
  template<> inline VkPhysicalDeviceTimelineSemaphoreFeaturesKHR make<VkPhysicalDeviceTimelineSemaphoreFeaturesKHR>(){
    return VkPhysicalDeviceTimelineSemaphoreFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR};
  }
  template<> inline VkPhysicalDeviceTimelineSemaphorePropertiesKHR make<VkPhysicalDeviceTimelineSemaphorePropertiesKHR>(){
    return VkPhysicalDeviceTimelineSemaphorePropertiesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR};
  }
  template<> inline VkSemaphoreTypeCreateInfoKHR make<VkSemaphoreTypeCreateInfoKHR>(){
    return VkSemaphoreTypeCreateInfoKHR{VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR};
  }
  template<> inline VkTimelineSemaphoreSubmitInfoKHR make<VkTimelineSemaphoreSubmitInfoKHR>(){
    return VkTimelineSemaphoreSubmitInfoKHR{VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR};
  }
  template<> inline VkSemaphoreWaitInfoKHR make<VkSemaphoreWaitInfoKHR>(){
    return VkSemaphoreWaitInfoKHR{VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR};
  }
  template<> inline VkSemaphoreSignalInfoKHR make<VkSemaphoreSignalInfoKHR>(){
    return VkSemaphoreSignalInfoKHR{VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR};
  }
#endif
#if VK_KHR_vulkan_memory_model
  template<> inline VkPhysicalDeviceVulkanMemoryModelFeaturesKHR make<VkPhysicalDeviceVulkanMemoryModelFeaturesKHR>(){
    return VkPhysicalDeviceVulkanMemoryModelFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR};
  }
#endif
#if VK_KHR_surface_protected_capabilities
  template<> inline VkSurfaceProtectedCapabilitiesKHR make<VkSurfaceProtectedCapabilitiesKHR>(){
    return VkSurfaceProtectedCapabilitiesKHR{VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR};
  }
#endif
#if VK_KHR_uniform_buffer_standard_layout
  template<> inline VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR make<VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR>(){
    return VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR};
  }
#endif
#if VK_KHR_pipeline_executable_properties
  template<> inline VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR make<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>(){
    return VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR};
  }
  template<> inline VkPipelineInfoKHR make<VkPipelineInfoKHR>(){
    return VkPipelineInfoKHR{VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR};
  }
  template<> inline VkPipelineExecutablePropertiesKHR make<VkPipelineExecutablePropertiesKHR>(){
    return VkPipelineExecutablePropertiesKHR{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR};
  }
  template<> inline VkPipelineExecutableInfoKHR make<VkPipelineExecutableInfoKHR>(){
    return VkPipelineExecutableInfoKHR{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR};
  }
  template<> inline VkPipelineExecutableStatisticKHR make<VkPipelineExecutableStatisticKHR>(){
    return VkPipelineExecutableStatisticKHR{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR};
  }
  template<> inline VkPipelineExecutableInternalRepresentationKHR make<VkPipelineExecutableInternalRepresentationKHR>(){
    return VkPipelineExecutableInternalRepresentationKHR{VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR};
  }
#endif
#if VK_EXT_debug_report
  template<> inline VkDebugReportCallbackCreateInfoEXT make<VkDebugReportCallbackCreateInfoEXT>(){
    return VkDebugReportCallbackCreateInfoEXT{VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT};
  }
#endif
#if VK_AMD_rasterization_order
  template<> inline VkPipelineRasterizationStateRasterizationOrderAMD make<VkPipelineRasterizationStateRasterizationOrderAMD>(){
    return VkPipelineRasterizationStateRasterizationOrderAMD{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD};
  }
#endif
#if VK_EXT_debug_marker
  template<> inline VkDebugMarkerObjectNameInfoEXT make<VkDebugMarkerObjectNameInfoEXT>(){
    return VkDebugMarkerObjectNameInfoEXT{VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT};
  }
  template<> inline VkDebugMarkerObjectTagInfoEXT make<VkDebugMarkerObjectTagInfoEXT>(){
    return VkDebugMarkerObjectTagInfoEXT{VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT};
  }
  template<> inline VkDebugMarkerMarkerInfoEXT make<VkDebugMarkerMarkerInfoEXT>(){
    return VkDebugMarkerMarkerInfoEXT{VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT};
  }
#endif
#if VK_NV_dedicated_allocation
  template<> inline VkDedicatedAllocationImageCreateInfoNV make<VkDedicatedAllocationImageCreateInfoNV>(){
    return VkDedicatedAllocationImageCreateInfoNV{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV};
  }
  template<> inline VkDedicatedAllocationBufferCreateInfoNV make<VkDedicatedAllocationBufferCreateInfoNV>(){
    return VkDedicatedAllocationBufferCreateInfoNV{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV};
  }
  template<> inline VkDedicatedAllocationMemoryAllocateInfoNV make<VkDedicatedAllocationMemoryAllocateInfoNV>(){
    return VkDedicatedAllocationMemoryAllocateInfoNV{VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV};
  }
#endif
#if VK_EXT_transform_feedback
  template<> inline VkPhysicalDeviceTransformFeedbackFeaturesEXT make<VkPhysicalDeviceTransformFeedbackFeaturesEXT>(){
    return VkPhysicalDeviceTransformFeedbackFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceTransformFeedbackPropertiesEXT make<VkPhysicalDeviceTransformFeedbackPropertiesEXT>(){
    return VkPhysicalDeviceTransformFeedbackPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT};
  }
  template<> inline VkPipelineRasterizationStateStreamCreateInfoEXT make<VkPipelineRasterizationStateStreamCreateInfoEXT>(){
    return VkPipelineRasterizationStateStreamCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT};
  }
#endif
#if VK_NVX_image_view_handle
  template<> inline VkImageViewHandleInfoNVX make<VkImageViewHandleInfoNVX>(){
    return VkImageViewHandleInfoNVX{VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX};
  }
#endif
#if VK_AMD_texture_gather_bias_lod
  template<> inline VkTextureLODGatherFormatPropertiesAMD make<VkTextureLODGatherFormatPropertiesAMD>(){
    return VkTextureLODGatherFormatPropertiesAMD{VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD};
  }
#endif
#if VK_NV_corner_sampled_image
  template<> inline VkPhysicalDeviceCornerSampledImageFeaturesNV make<VkPhysicalDeviceCornerSampledImageFeaturesNV>(){
    return VkPhysicalDeviceCornerSampledImageFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV};
  }
#endif
#if VK_NV_external_memory
  template<> inline VkExternalMemoryImageCreateInfoNV make<VkExternalMemoryImageCreateInfoNV>(){
    return VkExternalMemoryImageCreateInfoNV{VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV};
  }
  template<> inline VkExportMemoryAllocateInfoNV make<VkExportMemoryAllocateInfoNV>(){
    return VkExportMemoryAllocateInfoNV{VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV};
  }
#endif
#if VK_EXT_validation_flags
  template<> inline VkValidationFlagsEXT make<VkValidationFlagsEXT>(){
    return VkValidationFlagsEXT{VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT};
  }
#endif
#if VK_EXT_texture_compression_astc_hdr
  template<> inline VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT make<VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>(){
    return VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT};
  }
#endif
#if VK_EXT_astc_decode_mode
  template<> inline VkImageViewASTCDecodeModeEXT make<VkImageViewASTCDecodeModeEXT>(){
    return VkImageViewASTCDecodeModeEXT{VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT};
  }
  template<> inline VkPhysicalDeviceASTCDecodeFeaturesEXT make<VkPhysicalDeviceASTCDecodeFeaturesEXT>(){
    return VkPhysicalDeviceASTCDecodeFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT};
  }
#endif
#if VK_EXT_conditional_rendering
  template<> inline VkConditionalRenderingBeginInfoEXT make<VkConditionalRenderingBeginInfoEXT>(){
    return VkConditionalRenderingBeginInfoEXT{VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT};
  }
  template<> inline VkPhysicalDeviceConditionalRenderingFeaturesEXT make<VkPhysicalDeviceConditionalRenderingFeaturesEXT>(){
    return VkPhysicalDeviceConditionalRenderingFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT};
  }
  template<> inline VkCommandBufferInheritanceConditionalRenderingInfoEXT make<VkCommandBufferInheritanceConditionalRenderingInfoEXT>(){
    return VkCommandBufferInheritanceConditionalRenderingInfoEXT{VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT};
  }
#endif
#if VK_NVX_device_generated_commands
  template<> inline VkDeviceGeneratedCommandsFeaturesNVX make<VkDeviceGeneratedCommandsFeaturesNVX>(){
    return VkDeviceGeneratedCommandsFeaturesNVX{VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX};
  }
  template<> inline VkDeviceGeneratedCommandsLimitsNVX make<VkDeviceGeneratedCommandsLimitsNVX>(){
    return VkDeviceGeneratedCommandsLimitsNVX{VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX};
  }
  template<> inline VkIndirectCommandsLayoutCreateInfoNVX make<VkIndirectCommandsLayoutCreateInfoNVX>(){
    return VkIndirectCommandsLayoutCreateInfoNVX{VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX};
  }
  template<> inline VkCmdProcessCommandsInfoNVX make<VkCmdProcessCommandsInfoNVX>(){
    return VkCmdProcessCommandsInfoNVX{VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX};
  }
  template<> inline VkCmdReserveSpaceForCommandsInfoNVX make<VkCmdReserveSpaceForCommandsInfoNVX>(){
    return VkCmdReserveSpaceForCommandsInfoNVX{VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX};
  }
  template<> inline VkObjectTableCreateInfoNVX make<VkObjectTableCreateInfoNVX>(){
    return VkObjectTableCreateInfoNVX{VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX};
  }
#endif
#if VK_NV_clip_space_w_scaling
  template<> inline VkPipelineViewportWScalingStateCreateInfoNV make<VkPipelineViewportWScalingStateCreateInfoNV>(){
    return VkPipelineViewportWScalingStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV};
  }
#endif
#if VK_EXT_display_surface_counter
  template<> inline VkSurfaceCapabilities2EXT make<VkSurfaceCapabilities2EXT>(){
    return VkSurfaceCapabilities2EXT{VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT};
  }
#endif
#if VK_EXT_display_control
  template<> inline VkDisplayPowerInfoEXT make<VkDisplayPowerInfoEXT>(){
    return VkDisplayPowerInfoEXT{VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT};
  }
  template<> inline VkDeviceEventInfoEXT make<VkDeviceEventInfoEXT>(){
    return VkDeviceEventInfoEXT{VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT};
  }
  template<> inline VkDisplayEventInfoEXT make<VkDisplayEventInfoEXT>(){
    return VkDisplayEventInfoEXT{VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT};
  }
  template<> inline VkSwapchainCounterCreateInfoEXT make<VkSwapchainCounterCreateInfoEXT>(){
    return VkSwapchainCounterCreateInfoEXT{VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT};
  }
#endif
#if VK_GOOGLE_display_timing
  template<> inline VkPresentTimesInfoGOOGLE make<VkPresentTimesInfoGOOGLE>(){
    return VkPresentTimesInfoGOOGLE{VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE};
  }
#endif
#if VK_NVX_multiview_per_view_attributes
  template<> inline VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX make<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(){
    return VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX};
  }
#endif
#if VK_NV_viewport_swizzle
  template<> inline VkPipelineViewportSwizzleStateCreateInfoNV make<VkPipelineViewportSwizzleStateCreateInfoNV>(){
    return VkPipelineViewportSwizzleStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV};
  }
#endif
#if VK_EXT_discard_rectangles
  template<> inline VkPhysicalDeviceDiscardRectanglePropertiesEXT make<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(){
    return VkPhysicalDeviceDiscardRectanglePropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT};
  }
  template<> inline VkPipelineDiscardRectangleStateCreateInfoEXT make<VkPipelineDiscardRectangleStateCreateInfoEXT>(){
    return VkPipelineDiscardRectangleStateCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_conservative_rasterization
  template<> inline VkPhysicalDeviceConservativeRasterizationPropertiesEXT make<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(){
    return VkPhysicalDeviceConservativeRasterizationPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT};
  }
  template<> inline VkPipelineRasterizationConservativeStateCreateInfoEXT make<VkPipelineRasterizationConservativeStateCreateInfoEXT>(){
    return VkPipelineRasterizationConservativeStateCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_depth_clip_enable
  template<> inline VkPhysicalDeviceDepthClipEnableFeaturesEXT make<VkPhysicalDeviceDepthClipEnableFeaturesEXT>(){
    return VkPhysicalDeviceDepthClipEnableFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT};
  }
  template<> inline VkPipelineRasterizationDepthClipStateCreateInfoEXT make<VkPipelineRasterizationDepthClipStateCreateInfoEXT>(){
    return VkPipelineRasterizationDepthClipStateCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_hdr_metadata
  template<> inline VkHdrMetadataEXT make<VkHdrMetadataEXT>(){
    return VkHdrMetadataEXT{VK_STRUCTURE_TYPE_HDR_METADATA_EXT};
  }
#endif
#if VK_EXT_debug_utils
  template<> inline VkDebugUtilsObjectNameInfoEXT make<VkDebugUtilsObjectNameInfoEXT>(){
    return VkDebugUtilsObjectNameInfoEXT{VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT};
  }
  template<> inline VkDebugUtilsObjectTagInfoEXT make<VkDebugUtilsObjectTagInfoEXT>(){
    return VkDebugUtilsObjectTagInfoEXT{VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT};
  }
  template<> inline VkDebugUtilsLabelEXT make<VkDebugUtilsLabelEXT>(){
    return VkDebugUtilsLabelEXT{VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT};
  }
  template<> inline VkDebugUtilsMessengerCallbackDataEXT make<VkDebugUtilsMessengerCallbackDataEXT>(){
    return VkDebugUtilsMessengerCallbackDataEXT{VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT};
  }
  template<> inline VkDebugUtilsMessengerCreateInfoEXT make<VkDebugUtilsMessengerCreateInfoEXT>(){
    return VkDebugUtilsMessengerCreateInfoEXT{VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_sampler_filter_minmax
  template<> inline VkSamplerReductionModeCreateInfoEXT make<VkSamplerReductionModeCreateInfoEXT>(){
    return VkSamplerReductionModeCreateInfoEXT{VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT};
  }
  template<> inline VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT make<VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT>(){
    return VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT};
  }
#endif
#if VK_EXT_inline_uniform_block
  template<> inline VkPhysicalDeviceInlineUniformBlockFeaturesEXT make<VkPhysicalDeviceInlineUniformBlockFeaturesEXT>(){
    return VkPhysicalDeviceInlineUniformBlockFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceInlineUniformBlockPropertiesEXT make<VkPhysicalDeviceInlineUniformBlockPropertiesEXT>(){
    return VkPhysicalDeviceInlineUniformBlockPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT};
  }
  template<> inline VkWriteDescriptorSetInlineUniformBlockEXT make<VkWriteDescriptorSetInlineUniformBlockEXT>(){
    return VkWriteDescriptorSetInlineUniformBlockEXT{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT};
  }
  template<> inline VkDescriptorPoolInlineUniformBlockCreateInfoEXT make<VkDescriptorPoolInlineUniformBlockCreateInfoEXT>(){
    return VkDescriptorPoolInlineUniformBlockCreateInfoEXT{VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_sample_locations
  template<> inline VkSampleLocationsInfoEXT make<VkSampleLocationsInfoEXT>(){
    return VkSampleLocationsInfoEXT{VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT};
  }
  template<> inline VkRenderPassSampleLocationsBeginInfoEXT make<VkRenderPassSampleLocationsBeginInfoEXT>(){
    return VkRenderPassSampleLocationsBeginInfoEXT{VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT};
  }
  template<> inline VkPipelineSampleLocationsStateCreateInfoEXT make<VkPipelineSampleLocationsStateCreateInfoEXT>(){
    VkPipelineSampleLocationsStateCreateInfoEXT ret = {VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT};
    ret.sampleLocationsInfo = {VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT};
    return ret;
  }
  template<> inline VkPhysicalDeviceSampleLocationsPropertiesEXT make<VkPhysicalDeviceSampleLocationsPropertiesEXT>(){
    return VkPhysicalDeviceSampleLocationsPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT};
  }
  template<> inline VkMultisamplePropertiesEXT make<VkMultisamplePropertiesEXT>(){
    return VkMultisamplePropertiesEXT{VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT};
  }
#endif
#if VK_EXT_blend_operation_advanced
  template<> inline VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT make<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>(){
    return VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT make<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(){
    return VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT};
  }
  template<> inline VkPipelineColorBlendAdvancedStateCreateInfoEXT make<VkPipelineColorBlendAdvancedStateCreateInfoEXT>(){
    return VkPipelineColorBlendAdvancedStateCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT};
  }
#endif
#if VK_NV_fragment_coverage_to_color
  template<> inline VkPipelineCoverageToColorStateCreateInfoNV make<VkPipelineCoverageToColorStateCreateInfoNV>(){
    return VkPipelineCoverageToColorStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV};
  }
#endif
#if VK_NV_framebuffer_mixed_samples
  template<> inline VkPipelineCoverageModulationStateCreateInfoNV make<VkPipelineCoverageModulationStateCreateInfoNV>(){
    return VkPipelineCoverageModulationStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV};
  }
#endif
#if VK_NV_shader_sm_builtins
  template<> inline VkPhysicalDeviceShaderSMBuiltinsPropertiesNV make<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>(){
    return VkPhysicalDeviceShaderSMBuiltinsPropertiesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV};
  }
  template<> inline VkPhysicalDeviceShaderSMBuiltinsFeaturesNV make<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>(){
    return VkPhysicalDeviceShaderSMBuiltinsFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV};
  }
#endif
#if VK_EXT_image_drm_format_modifier
  template<> inline VkDrmFormatModifierPropertiesEXT make<VkDrmFormatModifierPropertiesEXT>(){
    return VkDrmFormatModifierPropertiesEXT{VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT};
  }
  template<> inline VkDrmFormatModifierPropertiesListEXT make<VkDrmFormatModifierPropertiesListEXT>(){
    return VkDrmFormatModifierPropertiesListEXT{VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT};
  }
  template<> inline VkPhysicalDeviceImageDrmFormatModifierInfoEXT make<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>(){
    return VkPhysicalDeviceImageDrmFormatModifierInfoEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT};
  }
  template<> inline VkImageDrmFormatModifierListCreateInfoEXT make<VkImageDrmFormatModifierListCreateInfoEXT>(){
    return VkImageDrmFormatModifierListCreateInfoEXT{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT};
  }
  template<> inline VkImageDrmFormatModifierExplicitCreateInfoEXT make<VkImageDrmFormatModifierExplicitCreateInfoEXT>(){
    return VkImageDrmFormatModifierExplicitCreateInfoEXT{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT};
  }
  template<> inline VkImageDrmFormatModifierPropertiesEXT make<VkImageDrmFormatModifierPropertiesEXT>(){
    return VkImageDrmFormatModifierPropertiesEXT{VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT};
  }
#endif
#if VK_EXT_validation_cache
  template<> inline VkValidationCacheCreateInfoEXT make<VkValidationCacheCreateInfoEXT>(){
    return VkValidationCacheCreateInfoEXT{VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT};
  }
  template<> inline VkShaderModuleValidationCacheCreateInfoEXT make<VkShaderModuleValidationCacheCreateInfoEXT>(){
    return VkShaderModuleValidationCacheCreateInfoEXT{VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_descriptor_indexing
  template<> inline VkDescriptorSetLayoutBindingFlagsCreateInfoEXT make<VkDescriptorSetLayoutBindingFlagsCreateInfoEXT>(){
    return VkDescriptorSetLayoutBindingFlagsCreateInfoEXT{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT};
  }
  template<> inline VkPhysicalDeviceDescriptorIndexingFeaturesEXT make<VkPhysicalDeviceDescriptorIndexingFeaturesEXT>(){
    return VkPhysicalDeviceDescriptorIndexingFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceDescriptorIndexingPropertiesEXT make<VkPhysicalDeviceDescriptorIndexingPropertiesEXT>(){
    return VkPhysicalDeviceDescriptorIndexingPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT};
  }
  template<> inline VkDescriptorSetVariableDescriptorCountAllocateInfoEXT make<VkDescriptorSetVariableDescriptorCountAllocateInfoEXT>(){
    return VkDescriptorSetVariableDescriptorCountAllocateInfoEXT{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT};
  }
  template<> inline VkDescriptorSetVariableDescriptorCountLayoutSupportEXT make<VkDescriptorSetVariableDescriptorCountLayoutSupportEXT>(){
    return VkDescriptorSetVariableDescriptorCountLayoutSupportEXT{VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT};
  }
#endif
#if VK_NV_shading_rate_image
  template<> inline VkPipelineViewportShadingRateImageStateCreateInfoNV make<VkPipelineViewportShadingRateImageStateCreateInfoNV>(){
    return VkPipelineViewportShadingRateImageStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV};
  }
  template<> inline VkPhysicalDeviceShadingRateImageFeaturesNV make<VkPhysicalDeviceShadingRateImageFeaturesNV>(){
    return VkPhysicalDeviceShadingRateImageFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV};
  }
  template<> inline VkPhysicalDeviceShadingRateImagePropertiesNV make<VkPhysicalDeviceShadingRateImagePropertiesNV>(){
    return VkPhysicalDeviceShadingRateImagePropertiesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV};
  }
  template<> inline VkPipelineViewportCoarseSampleOrderStateCreateInfoNV make<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>(){
    return VkPipelineViewportCoarseSampleOrderStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV};
  }
#endif
#if VK_NV_ray_tracing
  template<> inline VkRayTracingShaderGroupCreateInfoNV make<VkRayTracingShaderGroupCreateInfoNV>(){
    VkRayTracingShaderGroupCreateInfoNV ret = {VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV};
    ret.generalShader = VK_SHADER_UNUSED_NV;
    ret.closestHitShader = VK_SHADER_UNUSED_NV;
    ret.anyHitShader = VK_SHADER_UNUSED_NV;
    ret.intersectionShader = VK_SHADER_UNUSED_NV;
    return ret;
  }
  template<> inline VkRayTracingPipelineCreateInfoNV make<VkRayTracingPipelineCreateInfoNV>(){
    return VkRayTracingPipelineCreateInfoNV{VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV};
  }
  template<> inline VkGeometryTrianglesNV make<VkGeometryTrianglesNV>(){
    return VkGeometryTrianglesNV{VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV};
  }
  template<> inline VkGeometryAABBNV make<VkGeometryAABBNV>(){
    return VkGeometryAABBNV{VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV};
  }
  template<> inline VkGeometryNV make<VkGeometryNV>(){
    VkGeometryNV ret = {VK_STRUCTURE_TYPE_GEOMETRY_NV};
    ret.geometry.triangles = {VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV};
    ret.geometry.aabbs = {VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV};
    return ret;
  }
  template<> inline VkAccelerationStructureInfoNV make<VkAccelerationStructureInfoNV>(){
    return VkAccelerationStructureInfoNV{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV};
  }
  template<> inline VkAccelerationStructureCreateInfoNV make<VkAccelerationStructureCreateInfoNV>(){
    VkAccelerationStructureCreateInfoNV ret = {VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV};
    ret.info = {VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV};
    return ret;
  }
  template<> inline VkBindAccelerationStructureMemoryInfoNV make<VkBindAccelerationStructureMemoryInfoNV>(){
    return VkBindAccelerationStructureMemoryInfoNV{VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV};
  }
  template<> inline VkWriteDescriptorSetAccelerationStructureNV make<VkWriteDescriptorSetAccelerationStructureNV>(){
    return VkWriteDescriptorSetAccelerationStructureNV{VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV};
  }
  template<> inline VkAccelerationStructureMemoryRequirementsInfoNV make<VkAccelerationStructureMemoryRequirementsInfoNV>(){
    return VkAccelerationStructureMemoryRequirementsInfoNV{VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV};
  }
  template<> inline VkPhysicalDeviceRayTracingPropertiesNV make<VkPhysicalDeviceRayTracingPropertiesNV>(){
    return VkPhysicalDeviceRayTracingPropertiesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV};
  }
#endif
#if VK_NV_representative_fragment_test
  template<> inline VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV make<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>(){
    return VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV};
  }
  template<> inline VkPipelineRepresentativeFragmentTestStateCreateInfoNV make<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>(){
    return VkPipelineRepresentativeFragmentTestStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV};
  }
#endif
#if VK_EXT_filter_cubic
  template<> inline VkPhysicalDeviceImageViewImageFormatInfoEXT make<VkPhysicalDeviceImageViewImageFormatInfoEXT>(){
    return VkPhysicalDeviceImageViewImageFormatInfoEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT};
  }
  template<> inline VkFilterCubicImageViewImageFormatPropertiesEXT make<VkFilterCubicImageViewImageFormatPropertiesEXT>(){
    return VkFilterCubicImageViewImageFormatPropertiesEXT{VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT};
  }
#endif
#if VK_EXT_global_priority
  template<> inline VkDeviceQueueGlobalPriorityCreateInfoEXT make<VkDeviceQueueGlobalPriorityCreateInfoEXT>(){
    return VkDeviceQueueGlobalPriorityCreateInfoEXT{VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_external_memory_host
  template<> inline VkImportMemoryHostPointerInfoEXT make<VkImportMemoryHostPointerInfoEXT>(){
    return VkImportMemoryHostPointerInfoEXT{VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT};
  }
  template<> inline VkMemoryHostPointerPropertiesEXT make<VkMemoryHostPointerPropertiesEXT>(){
    return VkMemoryHostPointerPropertiesEXT{VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT};
  }
  template<> inline VkPhysicalDeviceExternalMemoryHostPropertiesEXT make<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(){
    return VkPhysicalDeviceExternalMemoryHostPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT};
  }
#endif
#if VK_AMD_pipeline_compiler_control
  template<> inline VkPipelineCompilerControlCreateInfoAMD make<VkPipelineCompilerControlCreateInfoAMD>(){
    return VkPipelineCompilerControlCreateInfoAMD{VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD};
  }
#endif
#if VK_EXT_calibrated_timestamps
  template<> inline VkCalibratedTimestampInfoEXT make<VkCalibratedTimestampInfoEXT>(){
    return VkCalibratedTimestampInfoEXT{VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT};
  }
#endif
#if VK_AMD_shader_core_properties
  template<> inline VkPhysicalDeviceShaderCorePropertiesAMD make<VkPhysicalDeviceShaderCorePropertiesAMD>(){
    return VkPhysicalDeviceShaderCorePropertiesAMD{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD};
  }
#endif
#if VK_AMD_memory_overallocation_behavior
  template<> inline VkDeviceMemoryOverallocationCreateInfoAMD make<VkDeviceMemoryOverallocationCreateInfoAMD>(){
    return VkDeviceMemoryOverallocationCreateInfoAMD{VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD};
  }
#endif
#if VK_EXT_vertex_attribute_divisor
  template<> inline VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT make<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>(){
    return VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT};
  }
  template<> inline VkPipelineVertexInputDivisorStateCreateInfoEXT make<VkPipelineVertexInputDivisorStateCreateInfoEXT>(){
    return VkPipelineVertexInputDivisorStateCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT};
  }
  template<> inline VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT make<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>(){
    return VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT};
  }
#endif
#if VK_EXT_pipeline_creation_feedback
  template<> inline VkPipelineCreationFeedbackCreateInfoEXT make<VkPipelineCreationFeedbackCreateInfoEXT>(){
    return VkPipelineCreationFeedbackCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT};
  }
#endif
#if VK_NV_compute_shader_derivatives
  template<> inline VkPhysicalDeviceComputeShaderDerivativesFeaturesNV make<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>(){
    return VkPhysicalDeviceComputeShaderDerivativesFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV};
  }
#endif
#if VK_NV_mesh_shader
  template<> inline VkPhysicalDeviceMeshShaderFeaturesNV make<VkPhysicalDeviceMeshShaderFeaturesNV>(){
    return VkPhysicalDeviceMeshShaderFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV};
  }
  template<> inline VkPhysicalDeviceMeshShaderPropertiesNV make<VkPhysicalDeviceMeshShaderPropertiesNV>(){
    return VkPhysicalDeviceMeshShaderPropertiesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV};
  }
#endif
#if VK_NV_fragment_shader_barycentric
  template<> inline VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV make<VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV>(){
    return VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV};
  }
#endif
#if VK_NV_shader_image_footprint
  template<> inline VkPhysicalDeviceShaderImageFootprintFeaturesNV make<VkPhysicalDeviceShaderImageFootprintFeaturesNV>(){
    return VkPhysicalDeviceShaderImageFootprintFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV};
  }
#endif
#if VK_NV_scissor_exclusive
  template<> inline VkPipelineViewportExclusiveScissorStateCreateInfoNV make<VkPipelineViewportExclusiveScissorStateCreateInfoNV>(){
    return VkPipelineViewportExclusiveScissorStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV};
  }
  template<> inline VkPhysicalDeviceExclusiveScissorFeaturesNV make<VkPhysicalDeviceExclusiveScissorFeaturesNV>(){
    return VkPhysicalDeviceExclusiveScissorFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV};
  }
#endif
#if VK_NV_device_diagnostic_checkpoints
  template<> inline VkQueueFamilyCheckpointPropertiesNV make<VkQueueFamilyCheckpointPropertiesNV>(){
    return VkQueueFamilyCheckpointPropertiesNV{VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV};
  }
  template<> inline VkCheckpointDataNV make<VkCheckpointDataNV>(){
    return VkCheckpointDataNV{VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV};
  }
#endif
#if VK_INTEL_shader_integer_functions2
  template<> inline VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL make<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>(){
    return VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL};
  }
#endif
#if VK_INTEL_performance_query
  template<> inline VkInitializePerformanceApiInfoINTEL make<VkInitializePerformanceApiInfoINTEL>(){
    return VkInitializePerformanceApiInfoINTEL{VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL};
  }
  template<> inline VkQueryPoolCreateInfoINTEL make<VkQueryPoolCreateInfoINTEL>(){
    return VkQueryPoolCreateInfoINTEL{VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL};
  }
  template<> inline VkPerformanceMarkerInfoINTEL make<VkPerformanceMarkerInfoINTEL>(){
    return VkPerformanceMarkerInfoINTEL{VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL};
  }
  template<> inline VkPerformanceStreamMarkerInfoINTEL make<VkPerformanceStreamMarkerInfoINTEL>(){
    return VkPerformanceStreamMarkerInfoINTEL{VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL};
  }
  template<> inline VkPerformanceOverrideInfoINTEL make<VkPerformanceOverrideInfoINTEL>(){
    return VkPerformanceOverrideInfoINTEL{VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL};
  }
  template<> inline VkPerformanceConfigurationAcquireInfoINTEL make<VkPerformanceConfigurationAcquireInfoINTEL>(){
    return VkPerformanceConfigurationAcquireInfoINTEL{VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL};
  }
#endif
#if VK_EXT_pci_bus_info
  template<> inline VkPhysicalDevicePCIBusInfoPropertiesEXT make<VkPhysicalDevicePCIBusInfoPropertiesEXT>(){
    return VkPhysicalDevicePCIBusInfoPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT};
  }
#endif
#if VK_AMD_display_native_hdr
  template<> inline VkDisplayNativeHdrSurfaceCapabilitiesAMD make<VkDisplayNativeHdrSurfaceCapabilitiesAMD>(){
    return VkDisplayNativeHdrSurfaceCapabilitiesAMD{VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD};
  }
  template<> inline VkSwapchainDisplayNativeHdrCreateInfoAMD make<VkSwapchainDisplayNativeHdrCreateInfoAMD>(){
    return VkSwapchainDisplayNativeHdrCreateInfoAMD{VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD};
  }
#endif
#if VK_EXT_fragment_density_map
  template<> inline VkPhysicalDeviceFragmentDensityMapFeaturesEXT make<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>(){
    return VkPhysicalDeviceFragmentDensityMapFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceFragmentDensityMapPropertiesEXT make<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>(){
    return VkPhysicalDeviceFragmentDensityMapPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT};
  }
  template<> inline VkRenderPassFragmentDensityMapCreateInfoEXT make<VkRenderPassFragmentDensityMapCreateInfoEXT>(){
    return VkRenderPassFragmentDensityMapCreateInfoEXT{VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_scalar_block_layout
  template<> inline VkPhysicalDeviceScalarBlockLayoutFeaturesEXT make<VkPhysicalDeviceScalarBlockLayoutFeaturesEXT>(){
    return VkPhysicalDeviceScalarBlockLayoutFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT};
  }
#endif
#if VK_EXT_subgroup_size_control
  template<> inline VkPhysicalDeviceSubgroupSizeControlFeaturesEXT make<VkPhysicalDeviceSubgroupSizeControlFeaturesEXT>(){
    return VkPhysicalDeviceSubgroupSizeControlFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceSubgroupSizeControlPropertiesEXT make<VkPhysicalDeviceSubgroupSizeControlPropertiesEXT>(){
    return VkPhysicalDeviceSubgroupSizeControlPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT};
  }
  template<> inline VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT make<VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>(){
    return VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT};
  }
#endif
#if VK_AMD_shader_core_properties2
  template<> inline VkPhysicalDeviceShaderCoreProperties2AMD make<VkPhysicalDeviceShaderCoreProperties2AMD>(){
    return VkPhysicalDeviceShaderCoreProperties2AMD{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD};
  }
#endif
#if VK_AMD_device_coherent_memory
  template<> inline VkPhysicalDeviceCoherentMemoryFeaturesAMD make<VkPhysicalDeviceCoherentMemoryFeaturesAMD>(){
    return VkPhysicalDeviceCoherentMemoryFeaturesAMD{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD};
  }
#endif
#if VK_EXT_memory_budget
  template<> inline VkPhysicalDeviceMemoryBudgetPropertiesEXT make<VkPhysicalDeviceMemoryBudgetPropertiesEXT>(){
    return VkPhysicalDeviceMemoryBudgetPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT};
  }
#endif
#if VK_EXT_memory_priority
  template<> inline VkPhysicalDeviceMemoryPriorityFeaturesEXT make<VkPhysicalDeviceMemoryPriorityFeaturesEXT>(){
    return VkPhysicalDeviceMemoryPriorityFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT};
  }
  template<> inline VkMemoryPriorityAllocateInfoEXT make<VkMemoryPriorityAllocateInfoEXT>(){
    return VkMemoryPriorityAllocateInfoEXT{VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT};
  }
#endif
#if VK_NV_dedicated_allocation_image_aliasing
  template<> inline VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV make<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>(){
    return VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV};
  }
#endif
#if VK_EXT_buffer_device_address
  template<> inline VkPhysicalDeviceBufferDeviceAddressFeaturesEXT make<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>(){
    return VkPhysicalDeviceBufferDeviceAddressFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT};
  }
  template<> inline VkBufferDeviceAddressInfoEXT make<VkBufferDeviceAddressInfoEXT>(){
    return VkBufferDeviceAddressInfoEXT{VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT};
  }
  template<> inline VkBufferDeviceAddressCreateInfoEXT make<VkBufferDeviceAddressCreateInfoEXT>(){
    return VkBufferDeviceAddressCreateInfoEXT{VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_separate_stencil_usage
  template<> inline VkImageStencilUsageCreateInfoEXT make<VkImageStencilUsageCreateInfoEXT>(){
    return VkImageStencilUsageCreateInfoEXT{VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_validation_features
  template<> inline VkValidationFeaturesEXT make<VkValidationFeaturesEXT>(){
    return VkValidationFeaturesEXT{VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT};
  }
#endif
#if VK_NV_cooperative_matrix
  template<> inline VkCooperativeMatrixPropertiesNV make<VkCooperativeMatrixPropertiesNV>(){
    return VkCooperativeMatrixPropertiesNV{VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV};
  }
  template<> inline VkPhysicalDeviceCooperativeMatrixFeaturesNV make<VkPhysicalDeviceCooperativeMatrixFeaturesNV>(){
    return VkPhysicalDeviceCooperativeMatrixFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV};
  }
  template<> inline VkPhysicalDeviceCooperativeMatrixPropertiesNV make<VkPhysicalDeviceCooperativeMatrixPropertiesNV>(){
    return VkPhysicalDeviceCooperativeMatrixPropertiesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV};
  }
#endif
#if VK_NV_coverage_reduction_mode
  template<> inline VkPhysicalDeviceCoverageReductionModeFeaturesNV make<VkPhysicalDeviceCoverageReductionModeFeaturesNV>(){
    return VkPhysicalDeviceCoverageReductionModeFeaturesNV{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV};
  }
  template<> inline VkPipelineCoverageReductionStateCreateInfoNV make<VkPipelineCoverageReductionStateCreateInfoNV>(){
    return VkPipelineCoverageReductionStateCreateInfoNV{VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV};
  }
  template<> inline VkFramebufferMixedSamplesCombinationNV make<VkFramebufferMixedSamplesCombinationNV>(){
    return VkFramebufferMixedSamplesCombinationNV{VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV};
  }
#endif
#if VK_EXT_fragment_shader_interlock
  template<> inline VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT make<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>(){
    return VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT};
  }
#endif
#if VK_EXT_ycbcr_image_arrays
  template<> inline VkPhysicalDeviceYcbcrImageArraysFeaturesEXT make<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>(){
    return VkPhysicalDeviceYcbcrImageArraysFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT};
  }
#endif
#if VK_EXT_headless_surface
  template<> inline VkHeadlessSurfaceCreateInfoEXT make<VkHeadlessSurfaceCreateInfoEXT>(){
    return VkHeadlessSurfaceCreateInfoEXT{VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_line_rasterization
  template<> inline VkPhysicalDeviceLineRasterizationFeaturesEXT make<VkPhysicalDeviceLineRasterizationFeaturesEXT>(){
    return VkPhysicalDeviceLineRasterizationFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceLineRasterizationPropertiesEXT make<VkPhysicalDeviceLineRasterizationPropertiesEXT>(){
    return VkPhysicalDeviceLineRasterizationPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT};
  }
  template<> inline VkPipelineRasterizationLineStateCreateInfoEXT make<VkPipelineRasterizationLineStateCreateInfoEXT>(){
    return VkPipelineRasterizationLineStateCreateInfoEXT{VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT};
  }
#endif
#if VK_EXT_host_query_reset
  template<> inline VkPhysicalDeviceHostQueryResetFeaturesEXT make<VkPhysicalDeviceHostQueryResetFeaturesEXT>(){
    return VkPhysicalDeviceHostQueryResetFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT};
  }
#endif
#if VK_EXT_index_type_uint8
  template<> inline VkPhysicalDeviceIndexTypeUint8FeaturesEXT make<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>(){
    return VkPhysicalDeviceIndexTypeUint8FeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT};
  }
#endif
#if VK_EXT_shader_demote_to_helper_invocation
  template<> inline VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT make<VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>(){
    return VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT};
  }
#endif
#if VK_EXT_texel_buffer_alignment
  template<> inline VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT make<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>(){
    return VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT};
  }
  template<> inline VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT make<VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT>(){
    return VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT{VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT};
  }
#endif
}
