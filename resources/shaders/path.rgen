#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "utils/random.glsl"
#include "utils/material.glsl"
#include "utils/ray_payload.glsl"
#include "utils/uniform_buffer_object.glsl"
#include "utils/tone_mapping.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT scene_;
layout(binding = 1, rgba32f) uniform image2D output_image_;
layout(binding = 2, rgba32f) uniform image2D accumulation_image_;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject ubo_; };
layout(binding = 7) readonly buffer LightArray { Light[] lights_; };

layout(location = 0) rayPayloadEXT RayPayload ray_;
layout(location = 2) rayPayloadEXT bool shadow_ray_;

#include "utils/sampling.glsl"


//-----------------------------------------------------
// eyepath
//-----------------------------------------------------

vec3 traceEyePath(in vec3 ro, in vec3 rd, inout uint seed) {
    uint ray_flags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 tcol = vec3(0.0);
    vec3 fcol = vec3(1.0);

    bool specular_bounce = true;

    for (int j = 0; j < ubo_.number_of_bounces; j++) {
        // shoot a ray out into the world
        ray_.t = tmax;
        ray_.mat = getZeroedMaterial();
        ray_.missed = false;
        ray_.from_inside = false;
        traceRayEXT(scene_, ray_flags, cullMask, 0, 0, 0, ro, tmin, rd, tmax, 0);

        if (ray_.mat.emissive != vec3(0.0)) {
            if(specular_bounce) {
                tcol += fcol * ray_.mat.emissive;
            }
            return tcol;
        }

        sampleBRDF(rd, ro, fcol, specular_bounce, seed);

        if (ray_.missed) {
            return clamp(tcol, 0.0, 1.0);
        }

        if(ubo_.debug_normals) {
            return remap(ray_.normal, -1.0f, 1.0f, 0.0f, 1.0f);
        }

        vec3 ld;
        float weight, light_dist;
        sampleLight(ro, ld, light_dist, weight, seed);
        // path of (j+1) eye path nodes, and 1 light path node ( = direct light sampling)
        if (!specular_bounce && !isOccluded(ro, ld, light_dist)) {
            tcol += (fcol * lights_[0].emission.xyz) * (weight * clamp(dot(ld, ray_.normal), 0., 1.)) ;
        }

        // Russian Roulette
        float p = max(fcol.r, max(fcol.g, fcol.b));
        if (randomFloat(seed) > p) {
            break;
        }
        fcol *= 1.0f/p;
    }

    return tcol;
}

void main() {
    vec3 pixel_color = vec3(0);

    for (int curr_sample = 0; curr_sample < ubo_.number_of_samples; curr_sample++) {
        uint seed = initRandom(gl_LaunchIDEXT.xy, ubo_.seed + ubo_.frame + curr_sample);

        const vec2 jitter = vec2(randomFloat(seed), randomFloat(seed)) - 0.5f;
        const vec2 uv_jittered = (gl_LaunchIDEXT.xy + jitter) / vec2(gl_LaunchSizeEXT.xy);
        const vec2 screen = uv_jittered * 2.0 - 1.0;

        vec4 origin = ubo_.model_view_inverse * vec4(0, 0, 0, 1);
        vec4 target = ubo_.projection_inverse * vec4(screen.x, screen.y, 1, 1);
        vec4 direction = ubo_.model_view_inverse * vec4(normalize(target.xyz), 0);

        pixel_color += traceEyePath(origin.xyz, direction.xyz, seed);
    }

    pixel_color /= float(ubo_.number_of_samples);

    vec4 last_frame_color = imageLoad(accumulation_image_, ivec2(gl_LaunchIDEXT.xy));
    float blend = (ubo_.frame < 2 || last_frame_color.a == 0.0) ? 1.0f : 1.0f / (1.0f + (1.0f / last_frame_color.a));
    pixel_color = mix(last_frame_color.rgb, pixel_color, blend);

    imageStore(accumulation_image_, ivec2(gl_LaunchIDEXT.xy), vec4(pixel_color, blend));

    // post processing
    pixel_color *= ubo_.exposure;

    if (ubo_.tone_map) {
        pixel_color = ACESFilm(pixel_color);
    }

    if (ubo_.gamma_correction) {
        pixel_color = linearToSRGB(pixel_color);
    }

    imageStore(output_image_, ivec2(gl_LaunchIDEXT.xy), vec4(pixel_color, blend));
}
